
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA IDENTIFIER LBRACE LPAREN NUMBER RBRACE RETURN RPAREN SEMICOLON TYPEfunction_declaration : TYPE IDENTIFIER parameter_list SEMICOLON\n                            | function_definitionfunction_definition : TYPE IDENTIFIER parameter_list LBRACE statement_list RBRACEparameter_list : LPAREN parameter_declarations RPAREN\n                      | LPAREN RPARENparameter_declarations : parameter_declaration\n                              | parameter_declaration COMMA parameter_declarationsparameter_declaration : TYPE IDENTIFIERstatement_list : statement\n                      | statement_list statementstatement : RETURN expression SEMICOLON\n                 | RETURN SEMICOLON\n                 | IDENTIFIER ASSIGN expression SEMICOLON\n                 | emptyexpression : IDENTIFIER\n                  | NUMBERempty :'
    
_lr_action_items = {'TYPE':([0,6,19,],[2,12,12,]),'$end':([1,3,7,22,],[0,-2,-1,-3,]),'IDENTIFIER':([2,8,12,14,15,16,17,21,23,25,30,31,],[4,13,20,13,-9,26,-14,26,-10,-12,-11,-13,]),'LPAREN':([4,],[6,]),'SEMICOLON':([5,10,16,18,24,26,27,29,],[7,-5,25,-4,30,-15,-16,31,]),'LBRACE':([5,10,18,],[8,-5,-4,]),'RPAREN':([6,9,11,20,28,],[10,18,-6,-8,-7,]),'RETURN':([8,14,15,17,23,25,30,31,],[16,16,-9,-14,-10,-12,-11,-13,]),'RBRACE':([8,14,15,17,23,25,30,31,],[-17,22,-9,-14,-10,-12,-11,-13,]),'COMMA':([11,20,],[19,-8,]),'ASSIGN':([13,],[21,]),'NUMBER':([16,21,],[27,27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'function_declaration':([0,],[1,]),'function_definition':([0,],[3,]),'parameter_list':([4,],[5,]),'parameter_declarations':([6,19,],[9,28,]),'parameter_declaration':([6,19,],[11,11,]),'statement_list':([8,],[14,]),'statement':([8,14,],[15,23,]),'empty':([8,14,],[17,17,]),'expression':([16,21,],[24,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> function_declaration","S'",1,None,None,None),
  ('function_declaration -> TYPE IDENTIFIER parameter_list SEMICOLON','function_declaration',4,'p_function_declaration','fndef_parser.py',12),
  ('function_declaration -> function_definition','function_declaration',1,'p_function_declaration','fndef_parser.py',13),
  ('function_definition -> TYPE IDENTIFIER parameter_list LBRACE statement_list RBRACE','function_definition',6,'p_function_definition','fndef_parser.py',20),
  ('parameter_list -> LPAREN parameter_declarations RPAREN','parameter_list',3,'p_parameter_list','fndef_parser.py',26),
  ('parameter_list -> LPAREN RPAREN','parameter_list',2,'p_parameter_list','fndef_parser.py',27),
  ('parameter_declarations -> parameter_declaration','parameter_declarations',1,'p_parameter_declarations','fndef_parser.py',31),
  ('parameter_declarations -> parameter_declaration COMMA parameter_declarations','parameter_declarations',3,'p_parameter_declarations','fndef_parser.py',32),
  ('parameter_declaration -> TYPE IDENTIFIER','parameter_declaration',2,'p_parameter_declaration','fndef_parser.py',36),
  ('statement_list -> statement','statement_list',1,'p_statement_list','fndef_parser.py',40),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','fndef_parser.py',41),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement','fndef_parser.py',45),
  ('statement -> RETURN SEMICOLON','statement',2,'p_statement','fndef_parser.py',46),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement','fndef_parser.py',47),
  ('statement -> empty','statement',1,'p_statement','fndef_parser.py',48),
  ('expression -> IDENTIFIER','expression',1,'p_expression','fndef_parser.py',62),
  ('expression -> NUMBER','expression',1,'p_expression','fndef_parser.py',63),
  ('empty -> <empty>','empty',0,'p_empty','fndef_parser.py',67),
]
