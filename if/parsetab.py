
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON ELIF ELSE EQUALS GREATER GREATER_EQUALS IDENTIFIER IF LESSER LESSER_EQUALS NEWLINE NUMBERprogram : statement_liststatement_list : statement statement_list\n| statementstatement : IF expression COLON\n| IF expression COLON NEWLINEstatement : ELIF expression COLON\n| ELIF expression COLON NEWLINEstatement : ELSE COLON\n| ELSE COLON NEWLINEexpression : expression GREATER expression\n| expression LESSER expression\n| expression GREATER_EQUALS expression\n| expression LESSER_EQUALS expression\n| IDENTIFIER\n| NUMBER'
    
_lr_action_items = {'IF':([0,3,12,13,18,19,20,25,],[4,4,-8,-4,-6,-9,-5,-7,]),'ELIF':([0,3,12,13,18,19,20,25,],[5,5,-8,-4,-6,-9,-5,-7,]),'ELSE':([0,3,12,13,18,19,20,25,],[6,6,-8,-4,-6,-9,-5,-7,]),'$end':([1,2,3,7,12,13,18,19,20,25,],[0,-1,-3,-2,-8,-4,-6,-9,-5,-7,]),'IDENTIFIER':([4,5,14,15,16,17,],[9,9,9,9,9,9,]),'NUMBER':([4,5,14,15,16,17,],[10,10,10,10,10,10,]),'COLON':([6,8,9,10,11,21,22,23,24,],[12,13,-14,-15,18,-10,-11,-12,-13,]),'GREATER':([8,9,10,11,21,22,23,24,],[14,-14,-15,14,14,14,14,14,]),'LESSER':([8,9,10,11,21,22,23,24,],[15,-14,-15,15,15,15,15,15,]),'GREATER_EQUALS':([8,9,10,11,21,22,23,24,],[16,-14,-15,16,16,16,16,16,]),'LESSER_EQUALS':([8,9,10,11,21,22,23,24,],[17,-14,-15,17,17,17,17,17,]),'NEWLINE':([12,13,18,],[19,20,25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,],[2,7,]),'statement':([0,3,],[3,3,]),'expression':([4,5,14,15,16,17,],[8,11,21,22,23,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',7),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',11),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',12),
  ('statement -> IF expression COLON','statement',3,'p_if_statement','parser.py',17),
  ('statement -> IF expression COLON NEWLINE','statement',4,'p_if_statement','parser.py',18),
  ('statement -> ELIF expression COLON','statement',3,'p_elif_statement','parser.py',23),
  ('statement -> ELIF expression COLON NEWLINE','statement',4,'p_elif_statement','parser.py',24),
  ('statement -> ELSE COLON','statement',2,'p_else_statement','parser.py',29),
  ('statement -> ELSE COLON NEWLINE','statement',3,'p_else_statement','parser.py',30),
  ('expression -> expression GREATER expression','expression',3,'p_expression_comparison','parser.py',34),
  ('expression -> expression LESSER expression','expression',3,'p_expression_comparison','parser.py',35),
  ('expression -> expression GREATER_EQUALS expression','expression',3,'p_expression_comparison','parser.py',36),
  ('expression -> expression LESSER_EQUALS expression','expression',3,'p_expression_comparison','parser.py',37),
  ('expression -> IDENTIFIER','expression',1,'p_expression_comparison','parser.py',38),
  ('expression -> NUMBER','expression',1,'p_expression_comparison','parser.py',39),
]
