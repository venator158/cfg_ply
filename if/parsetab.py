
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON DEDENT ELIF ELSE EQUALS EQUALS_EQUALS GREATER GREATER_EQUALS IDENTIFIER IF INDENT LESSER LESSER_EQUALS NEWLINE NUMBERprogram : statement_liststatement_list : statement\n                      | statement NEWLINE statement_liststatement : assignment\n                 | if_statementif_statement : IF expression COLON NEWLINE INDENT ignored_block DEDENT\n                    | IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks\n                    | IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block\n                    | IF expression COLON NEWLINE INDENT ignored_block DEDENT else_blockelif_blocks : ELIF expression COLON NEWLINE INDENT ignored_block DEDENT\n                   | ELIF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blockselse_block : ELSE COLON NEWLINE INDENT ignored_block DEDENTignored_block : statement_list\n                     | emptyexpression : IDENTIFIER\n                  | NUMBER\n                  | IDENTIFIER EQUALS_EQUALS NUMBER\n                  | IDENTIFIER GREATER NUMBER\n                  | IDENTIFIER LESSER NUMBER\n                  | IDENTIFIER GREATER_EQUALS NUMBER\n                  | IDENTIFIER LESSER_EQUALS NUMBERassignment : IDENTIFIER EQUALS NUMBERempty :'
    
_lr_action_items = {'IDENTIFIER':([0,7,8,27,34,42,43,],[6,11,6,6,11,6,6,]),'IF':([0,8,27,42,43,],[7,7,7,7,7,]),'$end':([1,2,3,4,5,13,14,31,32,33,36,46,47,48,],[0,-1,-2,-4,-5,-3,-22,-6,-7,-9,-8,-12,-10,-11,]),'DEDENT':([3,4,5,13,14,27,28,29,30,31,32,33,36,42,43,44,45,46,47,48,],[-2,-4,-5,-3,-22,-23,31,-13,-14,-6,-7,-9,-8,-23,-23,46,47,-12,-10,-11,]),'NEWLINE':([3,4,5,14,15,31,32,33,36,38,39,46,47,48,],[8,-4,-5,-22,21,-6,-7,-9,-8,40,41,-12,-10,-11,]),'EQUALS':([6,],[9,]),'NUMBER':([7,9,16,17,18,19,20,34,],[12,14,22,23,24,25,26,12,]),'COLON':([10,11,12,22,23,24,25,26,35,37,],[15,-15,-16,-17,-18,-19,-20,-21,38,39,]),'EQUALS_EQUALS':([11,],[16,]),'GREATER':([11,],[17,]),'LESSER':([11,],[18,]),'GREATER_EQUALS':([11,],[19,]),'LESSER_EQUALS':([11,],[20,]),'INDENT':([21,40,41,],[27,42,43,]),'ELIF':([31,47,],[34,34,]),'ELSE':([31,32,47,48,],[35,35,-10,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,8,27,42,43,],[2,13,29,29,29,]),'statement':([0,8,27,42,43,],[3,3,3,3,3,]),'assignment':([0,8,27,42,43,],[4,4,4,4,4,]),'if_statement':([0,8,27,42,43,],[5,5,5,5,5,]),'expression':([7,34,],[10,37,]),'ignored_block':([27,42,43,],[28,44,45,]),'empty':([27,42,43,],[30,30,30,]),'elif_blocks':([31,47,],[32,48,]),'else_block':([31,32,],[33,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','if_parser.py',6),
  ('statement_list -> statement','statement_list',1,'p_statement_list','if_parser.py',10),
  ('statement_list -> statement NEWLINE statement_list','statement_list',3,'p_statement_list','if_parser.py',11),
  ('statement -> assignment','statement',1,'p_statement','if_parser.py',15),
  ('statement -> if_statement','statement',1,'p_statement','if_parser.py',16),
  ('if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT','if_statement',7,'p_if_statement','if_parser.py',20),
  ('if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks','if_statement',8,'p_if_statement','if_parser.py',21),
  ('if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block','if_statement',9,'p_if_statement','if_parser.py',22),
  ('if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT else_block','if_statement',8,'p_if_statement','if_parser.py',23),
  ('elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT','elif_blocks',7,'p_elif_blocks','if_parser.py',27),
  ('elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks','elif_blocks',8,'p_elif_blocks','if_parser.py',28),
  ('else_block -> ELSE COLON NEWLINE INDENT ignored_block DEDENT','else_block',6,'p_else_block','if_parser.py',32),
  ('ignored_block -> statement_list','ignored_block',1,'p_ignored_block','if_parser.py',37),
  ('ignored_block -> empty','ignored_block',1,'p_ignored_block','if_parser.py',38),
  ('expression -> IDENTIFIER','expression',1,'p_expression','if_parser.py',42),
  ('expression -> NUMBER','expression',1,'p_expression','if_parser.py',43),
  ('expression -> IDENTIFIER EQUALS_EQUALS NUMBER','expression',3,'p_expression','if_parser.py',44),
  ('expression -> IDENTIFIER GREATER NUMBER','expression',3,'p_expression','if_parser.py',45),
  ('expression -> IDENTIFIER LESSER NUMBER','expression',3,'p_expression','if_parser.py',46),
  ('expression -> IDENTIFIER GREATER_EQUALS NUMBER','expression',3,'p_expression','if_parser.py',47),
  ('expression -> IDENTIFIER LESSER_EQUALS NUMBER','expression',3,'p_expression','if_parser.py',48),
  ('assignment -> IDENTIFIER EQUALS NUMBER','assignment',3,'p_assignment','if_parser.py',52),
  ('empty -> <empty>','empty',0,'p_empty','if_parser.py',56),
]
