Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement NEWLINE statement_list
Rule 4     statement -> assignment
Rule 5     statement -> print_statement
Rule 6     statement -> increment
Rule 7     statement -> decrement
Rule 8     statement -> standalone_statement
Rule 9     statement -> if_statement
Rule 10    statement -> elif_block
Rule 11    statement -> else_block
Rule 12    if_statement -> IF expression COLON NEWLINE statement_list
Rule 13    if_statement -> IF expression COLON NEWLINE statement_list NEWLINE if_statement
Rule 14    if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
Rule 15    if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list
Rule 16    if_statement -> IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block
Rule 17    elif_block -> ELIF expression COLON NEWLINE statement_list
Rule 18    elif_block -> ELIF expression COLON NEWLINE statement_list NEWLINE elif_block
Rule 19    else_block -> ELSE COLON NEWLINE statement_list
Rule 20    expression -> IDENTIFIER
Rule 21    expression -> NUMBER
Rule 22    expression -> IDENTIFIER EQUALS_EQUALS NUMBER
Rule 23    expression -> IDENTIFIER GREATER NUMBER
Rule 24    expression -> IDENTIFIER LESSER NUMBER
Rule 25    expression -> IDENTIFIER GREATER_EQUALS NUMBER
Rule 26    expression -> IDENTIFIER LESSER_EQUALS NUMBER
Rule 27    assignment -> IDENTIFIER EQUALS NUMBER
Rule 28    print_statement -> PRINT LPAREN IDENTIFIER RPAREN
Rule 29    increment -> IDENTIFIER PLUS_PLUS
Rule 30    decrement -> IDENTIFIER MINUS_MINUS
Rule 31    standalone_statement -> IDENTIFIER

Terminals, with rules where they appear

COLON                : 12 13 14 14 15 15 16 17 18 19
ELIF                 : 14 17 18
ELSE                 : 15 19
EQUALS               : 27
EQUALS_EQUALS        : 22
GREATER              : 23
GREATER_EQUALS       : 25
IDENTIFIER           : 20 22 23 24 25 26 27 28 29 30 31
IF                   : 12 13 14 15 16
LESSER               : 24
LESSER_EQUALS        : 26
LPAREN               : 28
MINUS_MINUS          : 30
NEWLINE              : 3 12 13 13 14 14 14 15 15 15 16 16 16 17 18 18 19
NUMBER               : 21 22 23 24 25 26 27
PLUS_PLUS            : 29
PRINT                : 28
RPAREN               : 28
error                : 

Nonterminals, with rules where they appear

assignment           : 4
decrement            : 7
elif_block           : 10 16 18
else_block           : 11 16
expression           : 12 13 14 14 15 16 17 18
if_statement         : 9 13
increment            : 6
print_statement      : 5
program              : 0
standalone_statement : 8
statement            : 2 3
statement_list       : 1 3 12 13 14 14 15 15 16 17 18 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . increment
    (7) statement -> . decrement
    (8) statement -> . standalone_statement
    (9) statement -> . if_statement
    (10) statement -> . elif_block
    (11) statement -> . else_block
    (27) assignment -> . IDENTIFIER EQUALS NUMBER
    (28) print_statement -> . PRINT LPAREN IDENTIFIER RPAREN
    (29) increment -> . IDENTIFIER PLUS_PLUS
    (30) decrement -> . IDENTIFIER MINUS_MINUS
    (31) standalone_statement -> . IDENTIFIER
    (12) if_statement -> . IF expression COLON NEWLINE statement_list
    (13) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE if_statement
    (14) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block
    (17) elif_block -> . ELIF expression COLON NEWLINE statement_list
    (18) elif_block -> . ELIF expression COLON NEWLINE statement_list NEWLINE elif_block
    (19) else_block -> . ELSE COLON NEWLINE statement_list

    IDENTIFIER      shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    ELIF            shift and go to state 15
    ELSE            shift and go to state 16

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    increment                      shift and go to state 6
    decrement                      shift and go to state 7
    standalone_statement           shift and go to state 8
    if_statement                   shift and go to state 9
    elif_block                     shift and go to state 10
    else_block                     shift and go to state 11

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 3

    (2) statement_list -> statement .
    (3) statement_list -> statement . NEWLINE statement_list

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 2 (statement_list -> statement .)
    NEWLINE         shift and go to state 17

  ! NEWLINE         [ reduce using rule 2 (statement_list -> statement .) ]


state 4

    (4) statement -> assignment .

    NEWLINE         reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> print_statement .

    NEWLINE         reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)


state 6

    (6) statement -> increment .

    NEWLINE         reduce using rule 6 (statement -> increment .)
    $end            reduce using rule 6 (statement -> increment .)


state 7

    (7) statement -> decrement .

    NEWLINE         reduce using rule 7 (statement -> decrement .)
    $end            reduce using rule 7 (statement -> decrement .)


state 8

    (8) statement -> standalone_statement .

    NEWLINE         reduce using rule 8 (statement -> standalone_statement .)
    $end            reduce using rule 8 (statement -> standalone_statement .)


state 9

    (9) statement -> if_statement .

    NEWLINE         reduce using rule 9 (statement -> if_statement .)
    $end            reduce using rule 9 (statement -> if_statement .)


state 10

    (10) statement -> elif_block .

    NEWLINE         reduce using rule 10 (statement -> elif_block .)
    $end            reduce using rule 10 (statement -> elif_block .)


state 11

    (11) statement -> else_block .

    NEWLINE         reduce using rule 11 (statement -> else_block .)
    $end            reduce using rule 11 (statement -> else_block .)


state 12

    (27) assignment -> IDENTIFIER . EQUALS NUMBER
    (29) increment -> IDENTIFIER . PLUS_PLUS
    (30) decrement -> IDENTIFIER . MINUS_MINUS
    (31) standalone_statement -> IDENTIFIER .

    EQUALS          shift and go to state 18
    PLUS_PLUS       shift and go to state 19
    MINUS_MINUS     shift and go to state 20
    NEWLINE         reduce using rule 31 (standalone_statement -> IDENTIFIER .)
    $end            reduce using rule 31 (standalone_statement -> IDENTIFIER .)


state 13

    (28) print_statement -> PRINT . LPAREN IDENTIFIER RPAREN

    LPAREN          shift and go to state 21


state 14

    (12) if_statement -> IF . expression COLON NEWLINE statement_list
    (13) if_statement -> IF . expression COLON NEWLINE statement_list NEWLINE if_statement
    (14) if_statement -> IF . expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> IF . expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> IF . expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block
    (20) expression -> . IDENTIFIER
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER EQUALS_EQUALS NUMBER
    (23) expression -> . IDENTIFIER GREATER NUMBER
    (24) expression -> . IDENTIFIER LESSER NUMBER
    (25) expression -> . IDENTIFIER GREATER_EQUALS NUMBER
    (26) expression -> . IDENTIFIER LESSER_EQUALS NUMBER

    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 24

    expression                     shift and go to state 22

state 15

    (17) elif_block -> ELIF . expression COLON NEWLINE statement_list
    (18) elif_block -> ELIF . expression COLON NEWLINE statement_list NEWLINE elif_block
    (20) expression -> . IDENTIFIER
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER EQUALS_EQUALS NUMBER
    (23) expression -> . IDENTIFIER GREATER NUMBER
    (24) expression -> . IDENTIFIER LESSER NUMBER
    (25) expression -> . IDENTIFIER GREATER_EQUALS NUMBER
    (26) expression -> . IDENTIFIER LESSER_EQUALS NUMBER

    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 24

    expression                     shift and go to state 25

state 16

    (19) else_block -> ELSE . COLON NEWLINE statement_list

    COLON           shift and go to state 26


state 17

    (3) statement_list -> statement NEWLINE . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . increment
    (7) statement -> . decrement
    (8) statement -> . standalone_statement
    (9) statement -> . if_statement
    (10) statement -> . elif_block
    (11) statement -> . else_block
    (27) assignment -> . IDENTIFIER EQUALS NUMBER
    (28) print_statement -> . PRINT LPAREN IDENTIFIER RPAREN
    (29) increment -> . IDENTIFIER PLUS_PLUS
    (30) decrement -> . IDENTIFIER MINUS_MINUS
    (31) standalone_statement -> . IDENTIFIER
    (12) if_statement -> . IF expression COLON NEWLINE statement_list
    (13) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE if_statement
    (14) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block
    (17) elif_block -> . ELIF expression COLON NEWLINE statement_list
    (18) elif_block -> . ELIF expression COLON NEWLINE statement_list NEWLINE elif_block
    (19) else_block -> . ELSE COLON NEWLINE statement_list

    IDENTIFIER      shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    ELIF            shift and go to state 15
    ELSE            shift and go to state 16

    statement                      shift and go to state 3
    statement_list                 shift and go to state 27
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    increment                      shift and go to state 6
    decrement                      shift and go to state 7
    standalone_statement           shift and go to state 8
    if_statement                   shift and go to state 9
    elif_block                     shift and go to state 10
    else_block                     shift and go to state 11

state 18

    (27) assignment -> IDENTIFIER EQUALS . NUMBER

    NUMBER          shift and go to state 28


state 19

    (29) increment -> IDENTIFIER PLUS_PLUS .

    NEWLINE         reduce using rule 29 (increment -> IDENTIFIER PLUS_PLUS .)
    $end            reduce using rule 29 (increment -> IDENTIFIER PLUS_PLUS .)


state 20

    (30) decrement -> IDENTIFIER MINUS_MINUS .

    NEWLINE         reduce using rule 30 (decrement -> IDENTIFIER MINUS_MINUS .)
    $end            reduce using rule 30 (decrement -> IDENTIFIER MINUS_MINUS .)


state 21

    (28) print_statement -> PRINT LPAREN . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 29


state 22

    (12) if_statement -> IF expression . COLON NEWLINE statement_list
    (13) if_statement -> IF expression . COLON NEWLINE statement_list NEWLINE if_statement
    (14) if_statement -> IF expression . COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> IF expression . COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> IF expression . COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block

    COLON           shift and go to state 30


state 23

    (20) expression -> IDENTIFIER .
    (22) expression -> IDENTIFIER . EQUALS_EQUALS NUMBER
    (23) expression -> IDENTIFIER . GREATER NUMBER
    (24) expression -> IDENTIFIER . LESSER NUMBER
    (25) expression -> IDENTIFIER . GREATER_EQUALS NUMBER
    (26) expression -> IDENTIFIER . LESSER_EQUALS NUMBER

    COLON           reduce using rule 20 (expression -> IDENTIFIER .)
    EQUALS_EQUALS   shift and go to state 31
    GREATER         shift and go to state 32
    LESSER          shift and go to state 33
    GREATER_EQUALS  shift and go to state 34
    LESSER_EQUALS   shift and go to state 35


state 24

    (21) expression -> NUMBER .

    COLON           reduce using rule 21 (expression -> NUMBER .)


state 25

    (17) elif_block -> ELIF expression . COLON NEWLINE statement_list
    (18) elif_block -> ELIF expression . COLON NEWLINE statement_list NEWLINE elif_block

    COLON           shift and go to state 36


state 26

    (19) else_block -> ELSE COLON . NEWLINE statement_list

    NEWLINE         shift and go to state 37


state 27

    (3) statement_list -> statement NEWLINE statement_list .

    $end            reduce using rule 3 (statement_list -> statement NEWLINE statement_list .)
    NEWLINE         reduce using rule 3 (statement_list -> statement NEWLINE statement_list .)


state 28

    (27) assignment -> IDENTIFIER EQUALS NUMBER .

    NEWLINE         reduce using rule 27 (assignment -> IDENTIFIER EQUALS NUMBER .)
    $end            reduce using rule 27 (assignment -> IDENTIFIER EQUALS NUMBER .)


state 29

    (28) print_statement -> PRINT LPAREN IDENTIFIER . RPAREN

    RPAREN          shift and go to state 38


state 30

    (12) if_statement -> IF expression COLON . NEWLINE statement_list
    (13) if_statement -> IF expression COLON . NEWLINE statement_list NEWLINE if_statement
    (14) if_statement -> IF expression COLON . NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> IF expression COLON . NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> IF expression COLON . NEWLINE statement_list NEWLINE elif_block NEWLINE else_block

    NEWLINE         shift and go to state 39


state 31

    (22) expression -> IDENTIFIER EQUALS_EQUALS . NUMBER

    NUMBER          shift and go to state 40


state 32

    (23) expression -> IDENTIFIER GREATER . NUMBER

    NUMBER          shift and go to state 41


state 33

    (24) expression -> IDENTIFIER LESSER . NUMBER

    NUMBER          shift and go to state 42


state 34

    (25) expression -> IDENTIFIER GREATER_EQUALS . NUMBER

    NUMBER          shift and go to state 43


state 35

    (26) expression -> IDENTIFIER LESSER_EQUALS . NUMBER

    NUMBER          shift and go to state 44


state 36

    (17) elif_block -> ELIF expression COLON . NEWLINE statement_list
    (18) elif_block -> ELIF expression COLON . NEWLINE statement_list NEWLINE elif_block

    NEWLINE         shift and go to state 45


state 37

    (19) else_block -> ELSE COLON NEWLINE . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . increment
    (7) statement -> . decrement
    (8) statement -> . standalone_statement
    (9) statement -> . if_statement
    (10) statement -> . elif_block
    (11) statement -> . else_block
    (27) assignment -> . IDENTIFIER EQUALS NUMBER
    (28) print_statement -> . PRINT LPAREN IDENTIFIER RPAREN
    (29) increment -> . IDENTIFIER PLUS_PLUS
    (30) decrement -> . IDENTIFIER MINUS_MINUS
    (31) standalone_statement -> . IDENTIFIER
    (12) if_statement -> . IF expression COLON NEWLINE statement_list
    (13) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE if_statement
    (14) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block
    (17) elif_block -> . ELIF expression COLON NEWLINE statement_list
    (18) elif_block -> . ELIF expression COLON NEWLINE statement_list NEWLINE elif_block
    (19) else_block -> . ELSE COLON NEWLINE statement_list

    IDENTIFIER      shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    ELIF            shift and go to state 15
    ELSE            shift and go to state 16

    statement_list                 shift and go to state 46
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    increment                      shift and go to state 6
    decrement                      shift and go to state 7
    standalone_statement           shift and go to state 8
    if_statement                   shift and go to state 9
    elif_block                     shift and go to state 10
    else_block                     shift and go to state 11

state 38

    (28) print_statement -> PRINT LPAREN IDENTIFIER RPAREN .

    NEWLINE         reduce using rule 28 (print_statement -> PRINT LPAREN IDENTIFIER RPAREN .)
    $end            reduce using rule 28 (print_statement -> PRINT LPAREN IDENTIFIER RPAREN .)


state 39

    (12) if_statement -> IF expression COLON NEWLINE . statement_list
    (13) if_statement -> IF expression COLON NEWLINE . statement_list NEWLINE if_statement
    (14) if_statement -> IF expression COLON NEWLINE . statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> IF expression COLON NEWLINE . statement_list NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> IF expression COLON NEWLINE . statement_list NEWLINE elif_block NEWLINE else_block
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . increment
    (7) statement -> . decrement
    (8) statement -> . standalone_statement
    (9) statement -> . if_statement
    (10) statement -> . elif_block
    (11) statement -> . else_block
    (27) assignment -> . IDENTIFIER EQUALS NUMBER
    (28) print_statement -> . PRINT LPAREN IDENTIFIER RPAREN
    (29) increment -> . IDENTIFIER PLUS_PLUS
    (30) decrement -> . IDENTIFIER MINUS_MINUS
    (31) standalone_statement -> . IDENTIFIER
    (12) if_statement -> . IF expression COLON NEWLINE statement_list
    (13) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE if_statement
    (14) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block
    (17) elif_block -> . ELIF expression COLON NEWLINE statement_list
    (18) elif_block -> . ELIF expression COLON NEWLINE statement_list NEWLINE elif_block
    (19) else_block -> . ELSE COLON NEWLINE statement_list

    IDENTIFIER      shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    ELIF            shift and go to state 15
    ELSE            shift and go to state 16

    statement_list                 shift and go to state 47
    if_statement                   shift and go to state 9
    elif_block                     shift and go to state 10
    else_block                     shift and go to state 11
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    increment                      shift and go to state 6
    decrement                      shift and go to state 7
    standalone_statement           shift and go to state 8

state 40

    (22) expression -> IDENTIFIER EQUALS_EQUALS NUMBER .

    COLON           reduce using rule 22 (expression -> IDENTIFIER EQUALS_EQUALS NUMBER .)


state 41

    (23) expression -> IDENTIFIER GREATER NUMBER .

    COLON           reduce using rule 23 (expression -> IDENTIFIER GREATER NUMBER .)


state 42

    (24) expression -> IDENTIFIER LESSER NUMBER .

    COLON           reduce using rule 24 (expression -> IDENTIFIER LESSER NUMBER .)


state 43

    (25) expression -> IDENTIFIER GREATER_EQUALS NUMBER .

    COLON           reduce using rule 25 (expression -> IDENTIFIER GREATER_EQUALS NUMBER .)


state 44

    (26) expression -> IDENTIFIER LESSER_EQUALS NUMBER .

    COLON           reduce using rule 26 (expression -> IDENTIFIER LESSER_EQUALS NUMBER .)


state 45

    (17) elif_block -> ELIF expression COLON NEWLINE . statement_list
    (18) elif_block -> ELIF expression COLON NEWLINE . statement_list NEWLINE elif_block
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . increment
    (7) statement -> . decrement
    (8) statement -> . standalone_statement
    (9) statement -> . if_statement
    (10) statement -> . elif_block
    (11) statement -> . else_block
    (27) assignment -> . IDENTIFIER EQUALS NUMBER
    (28) print_statement -> . PRINT LPAREN IDENTIFIER RPAREN
    (29) increment -> . IDENTIFIER PLUS_PLUS
    (30) decrement -> . IDENTIFIER MINUS_MINUS
    (31) standalone_statement -> . IDENTIFIER
    (12) if_statement -> . IF expression COLON NEWLINE statement_list
    (13) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE if_statement
    (14) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block
    (17) elif_block -> . ELIF expression COLON NEWLINE statement_list
    (18) elif_block -> . ELIF expression COLON NEWLINE statement_list NEWLINE elif_block
    (19) else_block -> . ELSE COLON NEWLINE statement_list

    IDENTIFIER      shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    ELIF            shift and go to state 15
    ELSE            shift and go to state 16

    statement_list                 shift and go to state 48
    elif_block                     shift and go to state 10
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    increment                      shift and go to state 6
    decrement                      shift and go to state 7
    standalone_statement           shift and go to state 8
    if_statement                   shift and go to state 9
    else_block                     shift and go to state 11

state 46

    (19) else_block -> ELSE COLON NEWLINE statement_list .

    NEWLINE         reduce using rule 19 (else_block -> ELSE COLON NEWLINE statement_list .)
    $end            reduce using rule 19 (else_block -> ELSE COLON NEWLINE statement_list .)


state 47

    (12) if_statement -> IF expression COLON NEWLINE statement_list .
    (13) if_statement -> IF expression COLON NEWLINE statement_list . NEWLINE if_statement
    (14) if_statement -> IF expression COLON NEWLINE statement_list . NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> IF expression COLON NEWLINE statement_list . NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> IF expression COLON NEWLINE statement_list . NEWLINE elif_block NEWLINE else_block

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 12 (if_statement -> IF expression COLON NEWLINE statement_list .)
    NEWLINE         shift and go to state 49

  ! NEWLINE         [ reduce using rule 12 (if_statement -> IF expression COLON NEWLINE statement_list .) ]


state 48

    (17) elif_block -> ELIF expression COLON NEWLINE statement_list .
    (18) elif_block -> ELIF expression COLON NEWLINE statement_list . NEWLINE elif_block

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 17 (elif_block -> ELIF expression COLON NEWLINE statement_list .)
    NEWLINE         shift and go to state 50

  ! NEWLINE         [ reduce using rule 17 (elif_block -> ELIF expression COLON NEWLINE statement_list .) ]


state 49

    (13) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE . if_statement
    (14) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE . ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE . ELSE COLON NEWLINE statement_list
    (16) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE . elif_block NEWLINE else_block
    (12) if_statement -> . IF expression COLON NEWLINE statement_list
    (13) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE if_statement
    (14) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block
    (17) elif_block -> . ELIF expression COLON NEWLINE statement_list
    (18) elif_block -> . ELIF expression COLON NEWLINE statement_list NEWLINE elif_block

    ELIF            shift and go to state 52
    ELSE            shift and go to state 53
    IF              shift and go to state 14

    if_statement                   shift and go to state 51
    elif_block                     shift and go to state 54

state 50

    (18) elif_block -> ELIF expression COLON NEWLINE statement_list NEWLINE . elif_block
    (17) elif_block -> . ELIF expression COLON NEWLINE statement_list
    (18) elif_block -> . ELIF expression COLON NEWLINE statement_list NEWLINE elif_block

    ELIF            shift and go to state 15

    elif_block                     shift and go to state 55

state 51

    (13) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE if_statement .

    NEWLINE         reduce using rule 13 (if_statement -> IF expression COLON NEWLINE statement_list NEWLINE if_statement .)
    $end            reduce using rule 13 (if_statement -> IF expression COLON NEWLINE statement_list NEWLINE if_statement .)


state 52

    (14) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELIF . expression COLON NEWLINE statement_list
    (17) elif_block -> ELIF . expression COLON NEWLINE statement_list
    (18) elif_block -> ELIF . expression COLON NEWLINE statement_list NEWLINE elif_block
    (20) expression -> . IDENTIFIER
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER EQUALS_EQUALS NUMBER
    (23) expression -> . IDENTIFIER GREATER NUMBER
    (24) expression -> . IDENTIFIER LESSER NUMBER
    (25) expression -> . IDENTIFIER GREATER_EQUALS NUMBER
    (26) expression -> . IDENTIFIER LESSER_EQUALS NUMBER

    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 24

    expression                     shift and go to state 56

state 53

    (15) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELSE . COLON NEWLINE statement_list

    COLON           shift and go to state 57


state 54

    (16) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE elif_block . NEWLINE else_block

    NEWLINE         shift and go to state 58


state 55

    (18) elif_block -> ELIF expression COLON NEWLINE statement_list NEWLINE elif_block .

    NEWLINE         reduce using rule 18 (elif_block -> ELIF expression COLON NEWLINE statement_list NEWLINE elif_block .)
    $end            reduce using rule 18 (elif_block -> ELIF expression COLON NEWLINE statement_list NEWLINE elif_block .)


state 56

    (14) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELIF expression . COLON NEWLINE statement_list
    (17) elif_block -> ELIF expression . COLON NEWLINE statement_list
    (18) elif_block -> ELIF expression . COLON NEWLINE statement_list NEWLINE elif_block

    COLON           shift and go to state 59


state 57

    (15) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON . NEWLINE statement_list

    NEWLINE         shift and go to state 60


state 58

    (16) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE . else_block
    (19) else_block -> . ELSE COLON NEWLINE statement_list

    ELSE            shift and go to state 16

    else_block                     shift and go to state 61

state 59

    (14) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON . NEWLINE statement_list
    (17) elif_block -> ELIF expression COLON . NEWLINE statement_list
    (18) elif_block -> ELIF expression COLON . NEWLINE statement_list NEWLINE elif_block

    NEWLINE         shift and go to state 62


state 60

    (15) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . increment
    (7) statement -> . decrement
    (8) statement -> . standalone_statement
    (9) statement -> . if_statement
    (10) statement -> . elif_block
    (11) statement -> . else_block
    (27) assignment -> . IDENTIFIER EQUALS NUMBER
    (28) print_statement -> . PRINT LPAREN IDENTIFIER RPAREN
    (29) increment -> . IDENTIFIER PLUS_PLUS
    (30) decrement -> . IDENTIFIER MINUS_MINUS
    (31) standalone_statement -> . IDENTIFIER
    (12) if_statement -> . IF expression COLON NEWLINE statement_list
    (13) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE if_statement
    (14) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block
    (17) elif_block -> . ELIF expression COLON NEWLINE statement_list
    (18) elif_block -> . ELIF expression COLON NEWLINE statement_list NEWLINE elif_block
    (19) else_block -> . ELSE COLON NEWLINE statement_list

    IDENTIFIER      shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    ELIF            shift and go to state 15
    ELSE            shift and go to state 16

    statement_list                 shift and go to state 63
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    increment                      shift and go to state 6
    decrement                      shift and go to state 7
    standalone_statement           shift and go to state 8
    if_statement                   shift and go to state 9
    elif_block                     shift and go to state 10
    else_block                     shift and go to state 11

state 61

    (16) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block .

    NEWLINE         reduce using rule 16 (if_statement -> IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block .)
    $end            reduce using rule 16 (if_statement -> IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block .)


state 62

    (14) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE . statement_list
    (17) elif_block -> ELIF expression COLON NEWLINE . statement_list
    (18) elif_block -> ELIF expression COLON NEWLINE . statement_list NEWLINE elif_block
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . increment
    (7) statement -> . decrement
    (8) statement -> . standalone_statement
    (9) statement -> . if_statement
    (10) statement -> . elif_block
    (11) statement -> . else_block
    (27) assignment -> . IDENTIFIER EQUALS NUMBER
    (28) print_statement -> . PRINT LPAREN IDENTIFIER RPAREN
    (29) increment -> . IDENTIFIER PLUS_PLUS
    (30) decrement -> . IDENTIFIER MINUS_MINUS
    (31) standalone_statement -> . IDENTIFIER
    (12) if_statement -> . IF expression COLON NEWLINE statement_list
    (13) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE if_statement
    (14) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list
    (15) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list
    (16) if_statement -> . IF expression COLON NEWLINE statement_list NEWLINE elif_block NEWLINE else_block
    (17) elif_block -> . ELIF expression COLON NEWLINE statement_list
    (18) elif_block -> . ELIF expression COLON NEWLINE statement_list NEWLINE elif_block
    (19) else_block -> . ELSE COLON NEWLINE statement_list

    IDENTIFIER      shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    ELIF            shift and go to state 15
    ELSE            shift and go to state 16

    statement_list                 shift and go to state 64
    elif_block                     shift and go to state 10
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    increment                      shift and go to state 6
    decrement                      shift and go to state 7
    standalone_statement           shift and go to state 8
    if_statement                   shift and go to state 9
    else_block                     shift and go to state 11

state 63

    (15) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list .

    NEWLINE         reduce using rule 15 (if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list .)
    $end            reduce using rule 15 (if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELSE COLON NEWLINE statement_list .)


state 64

    (14) if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list .
    (17) elif_block -> ELIF expression COLON NEWLINE statement_list .
    (18) elif_block -> ELIF expression COLON NEWLINE statement_list . NEWLINE elif_block

  ! reduce/reduce conflict for NEWLINE resolved using rule 14 (if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list .)
  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 14 (if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list .)
    NEWLINE         shift and go to state 50

  ! NEWLINE         [ reduce using rule 14 (if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list .) ]
  ! NEWLINE         [ reduce using rule 17 (elif_block -> ELIF expression COLON NEWLINE statement_list .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 3 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 47 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 48 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 64 resolved as shift
WARNING: reduce/reduce conflict in state 64 resolved using rule (if_statement -> IF expression COLON NEWLINE statement_list NEWLINE ELIF expression COLON NEWLINE statement_list)
WARNING: rejected rule (elif_block -> ELIF expression COLON NEWLINE statement_list) in state 64
