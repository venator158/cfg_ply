Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement NEWLINE statement_list
Rule 4     statement -> assignment
Rule 5     statement -> if_statement
Rule 6     if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT
Rule 7     if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks
Rule 8     if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block
Rule 9     if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT else_block
Rule 10    elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT
Rule 11    elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks
Rule 12    else_block -> ELSE COLON NEWLINE INDENT ignored_block DEDENT
Rule 13    ignored_block -> statement_list
Rule 14    ignored_block -> empty
Rule 15    expression -> IDENTIFIER
Rule 16    expression -> NUMBER
Rule 17    expression -> IDENTIFIER EQUALS_EQUALS NUMBER
Rule 18    expression -> IDENTIFIER GREATER NUMBER
Rule 19    expression -> IDENTIFIER LESSER NUMBER
Rule 20    expression -> IDENTIFIER GREATER_EQUALS NUMBER
Rule 21    expression -> IDENTIFIER LESSER_EQUALS NUMBER
Rule 22    assignment -> IDENTIFIER EQUALS NUMBER
Rule 23    empty -> <empty>

Terminals, with rules where they appear

COLON                : 6 7 8 9 10 11 12
DEDENT               : 6 7 8 9 10 11 12
ELIF                 : 10 11
ELSE                 : 12
EQUALS               : 22
EQUALS_EQUALS        : 17
GREATER              : 18
GREATER_EQUALS       : 20
IDENTIFIER           : 15 17 18 19 20 21 22
IF                   : 6 7 8 9
INDENT               : 6 7 8 9 10 11 12
LESSER               : 19
LESSER_EQUALS        : 21
NEWLINE              : 3 6 7 8 9 10 11 12
NUMBER               : 16 17 18 19 20 21 22
error                : 

Nonterminals, with rules where they appear

assignment           : 4
elif_blocks          : 7 8 11
else_block           : 8 9
empty                : 14
expression           : 6 7 8 9 10 11
if_statement         : 5
ignored_block        : 6 7 8 9 10 11 12
program              : 0
statement            : 2 3
statement_list       : 1 3 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (22) assignment -> . IDENTIFIER EQUALS NUMBER
    (6) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT
    (7) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks
    (8) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block
    (9) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT else_block

    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 3

    (2) statement_list -> statement .
    (3) statement_list -> statement . NEWLINE statement_list

    $end            reduce using rule 2 (statement_list -> statement .)
    DEDENT          reduce using rule 2 (statement_list -> statement .)
    NEWLINE         shift and go to state 8


state 4

    (4) statement -> assignment .

    NEWLINE         reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    DEDENT          reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> if_statement .

    NEWLINE         reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    DEDENT          reduce using rule 5 (statement -> if_statement .)


state 6

    (22) assignment -> IDENTIFIER . EQUALS NUMBER

    EQUALS          shift and go to state 9


state 7

    (6) if_statement -> IF . expression COLON NEWLINE INDENT ignored_block DEDENT
    (7) if_statement -> IF . expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks
    (8) if_statement -> IF . expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block
    (9) if_statement -> IF . expression COLON NEWLINE INDENT ignored_block DEDENT else_block
    (15) expression -> . IDENTIFIER
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER EQUALS_EQUALS NUMBER
    (18) expression -> . IDENTIFIER GREATER NUMBER
    (19) expression -> . IDENTIFIER LESSER NUMBER
    (20) expression -> . IDENTIFIER GREATER_EQUALS NUMBER
    (21) expression -> . IDENTIFIER LESSER_EQUALS NUMBER

    IDENTIFIER      shift and go to state 11
    NUMBER          shift and go to state 12

    expression                     shift and go to state 10

state 8

    (3) statement_list -> statement NEWLINE . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (22) assignment -> . IDENTIFIER EQUALS NUMBER
    (6) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT
    (7) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks
    (8) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block
    (9) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT else_block

    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7

    statement                      shift and go to state 3
    statement_list                 shift and go to state 13
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5

state 9

    (22) assignment -> IDENTIFIER EQUALS . NUMBER

    NUMBER          shift and go to state 14


state 10

    (6) if_statement -> IF expression . COLON NEWLINE INDENT ignored_block DEDENT
    (7) if_statement -> IF expression . COLON NEWLINE INDENT ignored_block DEDENT elif_blocks
    (8) if_statement -> IF expression . COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block
    (9) if_statement -> IF expression . COLON NEWLINE INDENT ignored_block DEDENT else_block

    COLON           shift and go to state 15


state 11

    (15) expression -> IDENTIFIER .
    (17) expression -> IDENTIFIER . EQUALS_EQUALS NUMBER
    (18) expression -> IDENTIFIER . GREATER NUMBER
    (19) expression -> IDENTIFIER . LESSER NUMBER
    (20) expression -> IDENTIFIER . GREATER_EQUALS NUMBER
    (21) expression -> IDENTIFIER . LESSER_EQUALS NUMBER

    COLON           reduce using rule 15 (expression -> IDENTIFIER .)
    EQUALS_EQUALS   shift and go to state 16
    GREATER         shift and go to state 17
    LESSER          shift and go to state 18
    GREATER_EQUALS  shift and go to state 19
    LESSER_EQUALS   shift and go to state 20


state 12

    (16) expression -> NUMBER .

    COLON           reduce using rule 16 (expression -> NUMBER .)


state 13

    (3) statement_list -> statement NEWLINE statement_list .

    $end            reduce using rule 3 (statement_list -> statement NEWLINE statement_list .)
    DEDENT          reduce using rule 3 (statement_list -> statement NEWLINE statement_list .)


state 14

    (22) assignment -> IDENTIFIER EQUALS NUMBER .

    NEWLINE         reduce using rule 22 (assignment -> IDENTIFIER EQUALS NUMBER .)
    $end            reduce using rule 22 (assignment -> IDENTIFIER EQUALS NUMBER .)
    DEDENT          reduce using rule 22 (assignment -> IDENTIFIER EQUALS NUMBER .)


state 15

    (6) if_statement -> IF expression COLON . NEWLINE INDENT ignored_block DEDENT
    (7) if_statement -> IF expression COLON . NEWLINE INDENT ignored_block DEDENT elif_blocks
    (8) if_statement -> IF expression COLON . NEWLINE INDENT ignored_block DEDENT elif_blocks else_block
    (9) if_statement -> IF expression COLON . NEWLINE INDENT ignored_block DEDENT else_block

    NEWLINE         shift and go to state 21


state 16

    (17) expression -> IDENTIFIER EQUALS_EQUALS . NUMBER

    NUMBER          shift and go to state 22


state 17

    (18) expression -> IDENTIFIER GREATER . NUMBER

    NUMBER          shift and go to state 23


state 18

    (19) expression -> IDENTIFIER LESSER . NUMBER

    NUMBER          shift and go to state 24


state 19

    (20) expression -> IDENTIFIER GREATER_EQUALS . NUMBER

    NUMBER          shift and go to state 25


state 20

    (21) expression -> IDENTIFIER LESSER_EQUALS . NUMBER

    NUMBER          shift and go to state 26


state 21

    (6) if_statement -> IF expression COLON NEWLINE . INDENT ignored_block DEDENT
    (7) if_statement -> IF expression COLON NEWLINE . INDENT ignored_block DEDENT elif_blocks
    (8) if_statement -> IF expression COLON NEWLINE . INDENT ignored_block DEDENT elif_blocks else_block
    (9) if_statement -> IF expression COLON NEWLINE . INDENT ignored_block DEDENT else_block

    INDENT          shift and go to state 27


state 22

    (17) expression -> IDENTIFIER EQUALS_EQUALS NUMBER .

    COLON           reduce using rule 17 (expression -> IDENTIFIER EQUALS_EQUALS NUMBER .)


state 23

    (18) expression -> IDENTIFIER GREATER NUMBER .

    COLON           reduce using rule 18 (expression -> IDENTIFIER GREATER NUMBER .)


state 24

    (19) expression -> IDENTIFIER LESSER NUMBER .

    COLON           reduce using rule 19 (expression -> IDENTIFIER LESSER NUMBER .)


state 25

    (20) expression -> IDENTIFIER GREATER_EQUALS NUMBER .

    COLON           reduce using rule 20 (expression -> IDENTIFIER GREATER_EQUALS NUMBER .)


state 26

    (21) expression -> IDENTIFIER LESSER_EQUALS NUMBER .

    COLON           reduce using rule 21 (expression -> IDENTIFIER LESSER_EQUALS NUMBER .)


state 27

    (6) if_statement -> IF expression COLON NEWLINE INDENT . ignored_block DEDENT
    (7) if_statement -> IF expression COLON NEWLINE INDENT . ignored_block DEDENT elif_blocks
    (8) if_statement -> IF expression COLON NEWLINE INDENT . ignored_block DEDENT elif_blocks else_block
    (9) if_statement -> IF expression COLON NEWLINE INDENT . ignored_block DEDENT else_block
    (13) ignored_block -> . statement_list
    (14) ignored_block -> . empty
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (23) empty -> .
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (22) assignment -> . IDENTIFIER EQUALS NUMBER
    (6) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT
    (7) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks
    (8) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block
    (9) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT else_block

    DEDENT          reduce using rule 23 (empty -> .)
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7

    ignored_block                  shift and go to state 28
    statement_list                 shift and go to state 29
    empty                          shift and go to state 30
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5

state 28

    (6) if_statement -> IF expression COLON NEWLINE INDENT ignored_block . DEDENT
    (7) if_statement -> IF expression COLON NEWLINE INDENT ignored_block . DEDENT elif_blocks
    (8) if_statement -> IF expression COLON NEWLINE INDENT ignored_block . DEDENT elif_blocks else_block
    (9) if_statement -> IF expression COLON NEWLINE INDENT ignored_block . DEDENT else_block

    DEDENT          shift and go to state 31


state 29

    (13) ignored_block -> statement_list .

    DEDENT          reduce using rule 13 (ignored_block -> statement_list .)


state 30

    (14) ignored_block -> empty .

    DEDENT          reduce using rule 14 (ignored_block -> empty .)


state 31

    (6) if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT .
    (7) if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT . elif_blocks
    (8) if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT . elif_blocks else_block
    (9) if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT . else_block
    (10) elif_blocks -> . ELIF expression COLON NEWLINE INDENT ignored_block DEDENT
    (11) elif_blocks -> . ELIF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks
    (12) else_block -> . ELSE COLON NEWLINE INDENT ignored_block DEDENT

    NEWLINE         reduce using rule 6 (if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT .)
    $end            reduce using rule 6 (if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT .)
    DEDENT          reduce using rule 6 (if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT .)
    ELIF            shift and go to state 34
    ELSE            shift and go to state 35

    elif_blocks                    shift and go to state 32
    else_block                     shift and go to state 33

state 32

    (7) if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks .
    (8) if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks . else_block
    (12) else_block -> . ELSE COLON NEWLINE INDENT ignored_block DEDENT

    NEWLINE         reduce using rule 7 (if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks .)
    $end            reduce using rule 7 (if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks .)
    DEDENT          reduce using rule 7 (if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks .)
    ELSE            shift and go to state 35

    else_block                     shift and go to state 36

state 33

    (9) if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT else_block .

    NEWLINE         reduce using rule 9 (if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT else_block .)
    $end            reduce using rule 9 (if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT else_block .)
    DEDENT          reduce using rule 9 (if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT else_block .)


state 34

    (10) elif_blocks -> ELIF . expression COLON NEWLINE INDENT ignored_block DEDENT
    (11) elif_blocks -> ELIF . expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks
    (15) expression -> . IDENTIFIER
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER EQUALS_EQUALS NUMBER
    (18) expression -> . IDENTIFIER GREATER NUMBER
    (19) expression -> . IDENTIFIER LESSER NUMBER
    (20) expression -> . IDENTIFIER GREATER_EQUALS NUMBER
    (21) expression -> . IDENTIFIER LESSER_EQUALS NUMBER

    IDENTIFIER      shift and go to state 11
    NUMBER          shift and go to state 12

    expression                     shift and go to state 37

state 35

    (12) else_block -> ELSE . COLON NEWLINE INDENT ignored_block DEDENT

    COLON           shift and go to state 38


state 36

    (8) if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block .

    NEWLINE         reduce using rule 8 (if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block .)
    $end            reduce using rule 8 (if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block .)
    DEDENT          reduce using rule 8 (if_statement -> IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block .)


state 37

    (10) elif_blocks -> ELIF expression . COLON NEWLINE INDENT ignored_block DEDENT
    (11) elif_blocks -> ELIF expression . COLON NEWLINE INDENT ignored_block DEDENT elif_blocks

    COLON           shift and go to state 39


state 38

    (12) else_block -> ELSE COLON . NEWLINE INDENT ignored_block DEDENT

    NEWLINE         shift and go to state 40


state 39

    (10) elif_blocks -> ELIF expression COLON . NEWLINE INDENT ignored_block DEDENT
    (11) elif_blocks -> ELIF expression COLON . NEWLINE INDENT ignored_block DEDENT elif_blocks

    NEWLINE         shift and go to state 41


state 40

    (12) else_block -> ELSE COLON NEWLINE . INDENT ignored_block DEDENT

    INDENT          shift and go to state 42


state 41

    (10) elif_blocks -> ELIF expression COLON NEWLINE . INDENT ignored_block DEDENT
    (11) elif_blocks -> ELIF expression COLON NEWLINE . INDENT ignored_block DEDENT elif_blocks

    INDENT          shift and go to state 43


state 42

    (12) else_block -> ELSE COLON NEWLINE INDENT . ignored_block DEDENT
    (13) ignored_block -> . statement_list
    (14) ignored_block -> . empty
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (23) empty -> .
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (22) assignment -> . IDENTIFIER EQUALS NUMBER
    (6) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT
    (7) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks
    (8) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block
    (9) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT else_block

    DEDENT          reduce using rule 23 (empty -> .)
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7

    ignored_block                  shift and go to state 44
    statement_list                 shift and go to state 29
    empty                          shift and go to state 30
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5

state 43

    (10) elif_blocks -> ELIF expression COLON NEWLINE INDENT . ignored_block DEDENT
    (11) elif_blocks -> ELIF expression COLON NEWLINE INDENT . ignored_block DEDENT elif_blocks
    (13) ignored_block -> . statement_list
    (14) ignored_block -> . empty
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (23) empty -> .
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (22) assignment -> . IDENTIFIER EQUALS NUMBER
    (6) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT
    (7) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks
    (8) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks else_block
    (9) if_statement -> . IF expression COLON NEWLINE INDENT ignored_block DEDENT else_block

    DEDENT          reduce using rule 23 (empty -> .)
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7

    ignored_block                  shift and go to state 45
    statement_list                 shift and go to state 29
    empty                          shift and go to state 30
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5

state 44

    (12) else_block -> ELSE COLON NEWLINE INDENT ignored_block . DEDENT

    DEDENT          shift and go to state 46


state 45

    (10) elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block . DEDENT
    (11) elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block . DEDENT elif_blocks

    DEDENT          shift and go to state 47


state 46

    (12) else_block -> ELSE COLON NEWLINE INDENT ignored_block DEDENT .

    NEWLINE         reduce using rule 12 (else_block -> ELSE COLON NEWLINE INDENT ignored_block DEDENT .)
    $end            reduce using rule 12 (else_block -> ELSE COLON NEWLINE INDENT ignored_block DEDENT .)
    DEDENT          reduce using rule 12 (else_block -> ELSE COLON NEWLINE INDENT ignored_block DEDENT .)


state 47

    (10) elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT .
    (11) elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT . elif_blocks
    (10) elif_blocks -> . ELIF expression COLON NEWLINE INDENT ignored_block DEDENT
    (11) elif_blocks -> . ELIF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks

    ELSE            reduce using rule 10 (elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT .)
    NEWLINE         reduce using rule 10 (elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT .)
    $end            reduce using rule 10 (elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT .)
    DEDENT          reduce using rule 10 (elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT .)
    ELIF            shift and go to state 34

    elif_blocks                    shift and go to state 48

state 48

    (11) elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks .

    ELSE            reduce using rule 11 (elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks .)
    NEWLINE         reduce using rule 11 (elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks .)
    $end            reduce using rule 11 (elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks .)
    DEDENT          reduce using rule 11 (elif_blocks -> ELIF expression COLON NEWLINE INDENT ignored_block DEDENT elif_blocks .)

