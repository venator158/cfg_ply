Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> declaration
Rule 1     declaration -> type IDENTIFIER SEMICOLON
Rule 2     declaration -> type IDENTIFIER EQUAL expression SEMICOLON
Rule 3     type -> INT
Rule 4     type -> FLOAT
Rule 5     type -> STRING_TYPE
Rule 6     expression -> NUMBER
Rule 7     expression -> STRING

Terminals, with rules where they appear

EQUAL                : 2
FLOAT                : 4
IDENTIFIER           : 1 2
INT                  : 3
NUMBER               : 6
SEMICOLON            : 1 2
STRING               : 7
STRING_TYPE          : 5
error                : 

Nonterminals, with rules where they appear

declaration          : 0
expression           : 2
type                 : 1 2

Parsing method: LALR

state 0

    (0) S' -> . declaration
    (1) declaration -> . type IDENTIFIER SEMICOLON
    (2) declaration -> . type IDENTIFIER EQUAL expression SEMICOLON
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . STRING_TYPE

    INT             shift and go to state 3
    FLOAT           shift and go to state 4
    STRING_TYPE     shift and go to state 5

    declaration                    shift and go to state 1
    type                           shift and go to state 2

state 1

    (0) S' -> declaration .



state 2

    (1) declaration -> type . IDENTIFIER SEMICOLON
    (2) declaration -> type . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 6


state 3

    (3) type -> INT .

    IDENTIFIER      reduce using rule 3 (type -> INT .)


state 4

    (4) type -> FLOAT .

    IDENTIFIER      reduce using rule 4 (type -> FLOAT .)


state 5

    (5) type -> STRING_TYPE .

    IDENTIFIER      reduce using rule 5 (type -> STRING_TYPE .)


state 6

    (1) declaration -> type IDENTIFIER . SEMICOLON
    (2) declaration -> type IDENTIFIER . EQUAL expression SEMICOLON

    SEMICOLON       shift and go to state 7
    EQUAL           shift and go to state 8


state 7

    (1) declaration -> type IDENTIFIER SEMICOLON .

    $end            reduce using rule 1 (declaration -> type IDENTIFIER SEMICOLON .)


state 8

    (2) declaration -> type IDENTIFIER EQUAL . expression SEMICOLON
    (6) expression -> . NUMBER
    (7) expression -> . STRING

    NUMBER          shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 9

state 9

    (2) declaration -> type IDENTIFIER EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 12


state 10

    (6) expression -> NUMBER .

    SEMICOLON       reduce using rule 6 (expression -> NUMBER .)


state 11

    (7) expression -> STRING .

    SEMICOLON       reduce using rule 7 (expression -> STRING .)


state 12

    (2) declaration -> type IDENTIFIER EQUAL expression SEMICOLON .

    $end            reduce using rule 2 (declaration -> type IDENTIFIER EQUAL expression SEMICOLON .)

