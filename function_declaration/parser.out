Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> function_declaration
Rule 1     function_declaration -> DEF IDENTIFIER LPAREN parameter_list RPAREN COLON
Rule 2     parameter_list -> parameters
Rule 3     parameter_list -> empty
Rule 4     parameters -> parameter
Rule 5     parameters -> parameter COMMA parameters
Rule 6     parameter -> IDENTIFIER
Rule 7     parameter -> IDENTIFIER EQUAL IDENTIFIER
Rule 8     empty -> <empty>

Terminals, with rules where they appear

COLON                : 1
COMMA                : 5
DEF                  : 1
EQUAL                : 7
IDENTIFIER           : 1 6 7 7
LPAREN               : 1
RPAREN               : 1
error                : 

Nonterminals, with rules where they appear

empty                : 3
function_declaration : 0
parameter            : 4 5
parameter_list       : 1
parameters           : 2 5

Parsing method: LALR

state 0

    (0) S' -> . function_declaration
    (1) function_declaration -> . DEF IDENTIFIER LPAREN parameter_list RPAREN COLON

    DEF             shift and go to state 2

    function_declaration           shift and go to state 1

state 1

    (0) S' -> function_declaration .



state 2

    (1) function_declaration -> DEF . IDENTIFIER LPAREN parameter_list RPAREN COLON

    IDENTIFIER      shift and go to state 3


state 3

    (1) function_declaration -> DEF IDENTIFIER . LPAREN parameter_list RPAREN COLON

    LPAREN          shift and go to state 4


state 4

    (1) function_declaration -> DEF IDENTIFIER LPAREN . parameter_list RPAREN COLON
    (2) parameter_list -> . parameters
    (3) parameter_list -> . empty
    (4) parameters -> . parameter
    (5) parameters -> . parameter COMMA parameters
    (8) empty -> .
    (6) parameter -> . IDENTIFIER
    (7) parameter -> . IDENTIFIER EQUAL IDENTIFIER

    RPAREN          reduce using rule 8 (empty -> .)
    IDENTIFIER      shift and go to state 5

    parameter_list                 shift and go to state 6
    parameters                     shift and go to state 7
    empty                          shift and go to state 8
    parameter                      shift and go to state 9

state 5

    (6) parameter -> IDENTIFIER .
    (7) parameter -> IDENTIFIER . EQUAL IDENTIFIER

    COMMA           reduce using rule 6 (parameter -> IDENTIFIER .)
    RPAREN          reduce using rule 6 (parameter -> IDENTIFIER .)
    EQUAL           shift and go to state 10


state 6

    (1) function_declaration -> DEF IDENTIFIER LPAREN parameter_list . RPAREN COLON

    RPAREN          shift and go to state 11


state 7

    (2) parameter_list -> parameters .

    RPAREN          reduce using rule 2 (parameter_list -> parameters .)


state 8

    (3) parameter_list -> empty .

    RPAREN          reduce using rule 3 (parameter_list -> empty .)


state 9

    (4) parameters -> parameter .
    (5) parameters -> parameter . COMMA parameters

    RPAREN          reduce using rule 4 (parameters -> parameter .)
    COMMA           shift and go to state 12


state 10

    (7) parameter -> IDENTIFIER EQUAL . IDENTIFIER

    IDENTIFIER      shift and go to state 13


state 11

    (1) function_declaration -> DEF IDENTIFIER LPAREN parameter_list RPAREN . COLON

    COLON           shift and go to state 14


state 12

    (5) parameters -> parameter COMMA . parameters
    (4) parameters -> . parameter
    (5) parameters -> . parameter COMMA parameters
    (6) parameter -> . IDENTIFIER
    (7) parameter -> . IDENTIFIER EQUAL IDENTIFIER

    IDENTIFIER      shift and go to state 5

    parameter                      shift and go to state 9
    parameters                     shift and go to state 15

state 13

    (7) parameter -> IDENTIFIER EQUAL IDENTIFIER .

    COMMA           reduce using rule 7 (parameter -> IDENTIFIER EQUAL IDENTIFIER .)
    RPAREN          reduce using rule 7 (parameter -> IDENTIFIER EQUAL IDENTIFIER .)


state 14

    (1) function_declaration -> DEF IDENTIFIER LPAREN parameter_list RPAREN COLON .

    $end            reduce using rule 1 (function_declaration -> DEF IDENTIFIER LPAREN parameter_list RPAREN COLON .)


state 15

    (5) parameters -> parameter COMMA parameters .

    RPAREN          reduce using rule 5 (parameters -> parameter COMMA parameters .)

