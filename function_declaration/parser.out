Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> function_declaration
Rule 1     function_declaration -> TYPE IDENTIFIER parameter_list SEMICOLON
Rule 2     parameter_list -> LPAREN parameter_declarations RPAREN
Rule 3     parameter_list -> LPAREN RPAREN
Rule 4     parameter_declarations -> parameter_declaration
Rule 5     parameter_declarations -> parameter_declaration COMMA parameter_declarations
Rule 6     parameter_declaration -> TYPE IDENTIFIER

Terminals, with rules where they appear

COMMA                : 5
IDENTIFIER           : 1 6
LPAREN               : 2 3
RPAREN               : 2 3
SEMICOLON            : 1
TYPE                 : 1 6
error                : 

Nonterminals, with rules where they appear

function_declaration : 0
parameter_declaration : 4 5
parameter_declarations : 2 5
parameter_list       : 1

Parsing method: LALR

state 0

    (0) S' -> . function_declaration
    (1) function_declaration -> . TYPE IDENTIFIER parameter_list SEMICOLON

    TYPE            shift and go to state 2

    function_declaration           shift and go to state 1

state 1

    (0) S' -> function_declaration .



state 2

    (1) function_declaration -> TYPE . IDENTIFIER parameter_list SEMICOLON

    IDENTIFIER      shift and go to state 3


state 3

    (1) function_declaration -> TYPE IDENTIFIER . parameter_list SEMICOLON
    (2) parameter_list -> . LPAREN parameter_declarations RPAREN
    (3) parameter_list -> . LPAREN RPAREN

    LPAREN          shift and go to state 5

    parameter_list                 shift and go to state 4

state 4

    (1) function_declaration -> TYPE IDENTIFIER parameter_list . SEMICOLON

    SEMICOLON       shift and go to state 6


state 5

    (2) parameter_list -> LPAREN . parameter_declarations RPAREN
    (3) parameter_list -> LPAREN . RPAREN
    (4) parameter_declarations -> . parameter_declaration
    (5) parameter_declarations -> . parameter_declaration COMMA parameter_declarations
    (6) parameter_declaration -> . TYPE IDENTIFIER

    RPAREN          shift and go to state 8
    TYPE            shift and go to state 10

    parameter_declarations         shift and go to state 7
    parameter_declaration          shift and go to state 9

state 6

    (1) function_declaration -> TYPE IDENTIFIER parameter_list SEMICOLON .

    $end            reduce using rule 1 (function_declaration -> TYPE IDENTIFIER parameter_list SEMICOLON .)


state 7

    (2) parameter_list -> LPAREN parameter_declarations . RPAREN

    RPAREN          shift and go to state 11


state 8

    (3) parameter_list -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 3 (parameter_list -> LPAREN RPAREN .)


state 9

    (4) parameter_declarations -> parameter_declaration .
    (5) parameter_declarations -> parameter_declaration . COMMA parameter_declarations

    RPAREN          reduce using rule 4 (parameter_declarations -> parameter_declaration .)
    COMMA           shift and go to state 12


state 10

    (6) parameter_declaration -> TYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 13


state 11

    (2) parameter_list -> LPAREN parameter_declarations RPAREN .

    SEMICOLON       reduce using rule 2 (parameter_list -> LPAREN parameter_declarations RPAREN .)


state 12

    (5) parameter_declarations -> parameter_declaration COMMA . parameter_declarations
    (4) parameter_declarations -> . parameter_declaration
    (5) parameter_declarations -> . parameter_declaration COMMA parameter_declarations
    (6) parameter_declaration -> . TYPE IDENTIFIER

    TYPE            shift and go to state 10

    parameter_declaration          shift and go to state 9
    parameter_declarations         shift and go to state 14

state 13

    (6) parameter_declaration -> TYPE IDENTIFIER .

    COMMA           reduce using rule 6 (parameter_declaration -> TYPE IDENTIFIER .)
    RPAREN          reduce using rule 6 (parameter_declaration -> TYPE IDENTIFIER .)


state 14

    (5) parameter_declarations -> parameter_declaration COMMA parameter_declarations .

    RPAREN          reduce using rule 5 (parameter_declarations -> parameter_declaration COMMA parameter_declarations .)

