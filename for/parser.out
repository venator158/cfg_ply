Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement NEWLINE statement_list
Rule 4     statement -> assignment
Rule 5     statement -> for_loop
Rule 6     statement -> print_statement
Rule 7     statement -> increment
Rule 8     statement -> decrement
Rule 9     statement -> standalone_statement
Rule 10    for_loop -> FOR IDENTIFIER IN func_call COLON NEWLINE statement_list
Rule 11    func_call -> IDENTIFIER LPAREN NUMBER RPAREN
Rule 12    func_call -> IDENTIFIER LPAREN NUMBER COMMA NUMBER RPAREN
Rule 13    func_call -> IDENTIFIER LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN
Rule 14    assignment -> IDENTIFIER EQUALS NUMBER
Rule 15    print_statement -> PRINT LPAREN IDENTIFIER RPAREN
Rule 16    increment -> IDENTIFIER PLUS_PLUS
Rule 17    decrement -> IDENTIFIER MINUS_MINUS
Rule 18    standalone_statement -> IDENTIFIER

Terminals, with rules where they appear

COLON                : 10
COMMA                : 12 13 13
EQUALS               : 14
FOR                  : 10
IDENTIFIER           : 10 11 12 13 14 15 16 17 18
IN                   : 10
LPAREN               : 11 12 13 15
MINUS_MINUS          : 17
NEWLINE              : 3 10
NUMBER               : 11 12 12 13 13 13 14
PLUS_PLUS            : 16
PRINT                : 15
RPAREN               : 11 12 13 15
error                : 

Nonterminals, with rules where they appear

assignment           : 4
decrement            : 8
for_loop             : 5
func_call            : 10
increment            : 7
print_statement      : 6
program              : 0
standalone_statement : 9
statement            : 2 3
statement_list       : 1 3 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (4) statement -> . assignment
    (5) statement -> . for_loop
    (6) statement -> . print_statement
    (7) statement -> . increment
    (8) statement -> . decrement
    (9) statement -> . standalone_statement
    (14) assignment -> . IDENTIFIER EQUALS NUMBER
    (10) for_loop -> . FOR IDENTIFIER IN func_call COLON NEWLINE statement_list
    (15) print_statement -> . PRINT LPAREN IDENTIFIER RPAREN
    (16) increment -> . IDENTIFIER PLUS_PLUS
    (17) decrement -> . IDENTIFIER MINUS_MINUS
    (18) standalone_statement -> . IDENTIFIER

    IDENTIFIER      shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    for_loop                       shift and go to state 5
    print_statement                shift and go to state 6
    increment                      shift and go to state 7
    decrement                      shift and go to state 8
    standalone_statement           shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 3

    (2) statement_list -> statement .
    (3) statement_list -> statement . NEWLINE statement_list

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 2 (statement_list -> statement .)
    NEWLINE         shift and go to state 13

  ! NEWLINE         [ reduce using rule 2 (statement_list -> statement .) ]


state 4

    (4) statement -> assignment .

    NEWLINE         reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> for_loop .

    NEWLINE         reduce using rule 5 (statement -> for_loop .)
    $end            reduce using rule 5 (statement -> for_loop .)


state 6

    (6) statement -> print_statement .

    NEWLINE         reduce using rule 6 (statement -> print_statement .)
    $end            reduce using rule 6 (statement -> print_statement .)


state 7

    (7) statement -> increment .

    NEWLINE         reduce using rule 7 (statement -> increment .)
    $end            reduce using rule 7 (statement -> increment .)


state 8

    (8) statement -> decrement .

    NEWLINE         reduce using rule 8 (statement -> decrement .)
    $end            reduce using rule 8 (statement -> decrement .)


state 9

    (9) statement -> standalone_statement .

    NEWLINE         reduce using rule 9 (statement -> standalone_statement .)
    $end            reduce using rule 9 (statement -> standalone_statement .)


state 10

    (14) assignment -> IDENTIFIER . EQUALS NUMBER
    (16) increment -> IDENTIFIER . PLUS_PLUS
    (17) decrement -> IDENTIFIER . MINUS_MINUS
    (18) standalone_statement -> IDENTIFIER .

    EQUALS          shift and go to state 14
    PLUS_PLUS       shift and go to state 15
    MINUS_MINUS     shift and go to state 16
    NEWLINE         reduce using rule 18 (standalone_statement -> IDENTIFIER .)
    $end            reduce using rule 18 (standalone_statement -> IDENTIFIER .)


state 11

    (10) for_loop -> FOR . IDENTIFIER IN func_call COLON NEWLINE statement_list

    IDENTIFIER      shift and go to state 17


state 12

    (15) print_statement -> PRINT . LPAREN IDENTIFIER RPAREN

    LPAREN          shift and go to state 18


state 13

    (3) statement_list -> statement NEWLINE . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (4) statement -> . assignment
    (5) statement -> . for_loop
    (6) statement -> . print_statement
    (7) statement -> . increment
    (8) statement -> . decrement
    (9) statement -> . standalone_statement
    (14) assignment -> . IDENTIFIER EQUALS NUMBER
    (10) for_loop -> . FOR IDENTIFIER IN func_call COLON NEWLINE statement_list
    (15) print_statement -> . PRINT LPAREN IDENTIFIER RPAREN
    (16) increment -> . IDENTIFIER PLUS_PLUS
    (17) decrement -> . IDENTIFIER MINUS_MINUS
    (18) standalone_statement -> . IDENTIFIER

    IDENTIFIER      shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12

    statement                      shift and go to state 3
    statement_list                 shift and go to state 19
    assignment                     shift and go to state 4
    for_loop                       shift and go to state 5
    print_statement                shift and go to state 6
    increment                      shift and go to state 7
    decrement                      shift and go to state 8
    standalone_statement           shift and go to state 9

state 14

    (14) assignment -> IDENTIFIER EQUALS . NUMBER

    NUMBER          shift and go to state 20


state 15

    (16) increment -> IDENTIFIER PLUS_PLUS .

    NEWLINE         reduce using rule 16 (increment -> IDENTIFIER PLUS_PLUS .)
    $end            reduce using rule 16 (increment -> IDENTIFIER PLUS_PLUS .)


state 16

    (17) decrement -> IDENTIFIER MINUS_MINUS .

    NEWLINE         reduce using rule 17 (decrement -> IDENTIFIER MINUS_MINUS .)
    $end            reduce using rule 17 (decrement -> IDENTIFIER MINUS_MINUS .)


state 17

    (10) for_loop -> FOR IDENTIFIER . IN func_call COLON NEWLINE statement_list

    IN              shift and go to state 21


state 18

    (15) print_statement -> PRINT LPAREN . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 22


state 19

    (3) statement_list -> statement NEWLINE statement_list .

    $end            reduce using rule 3 (statement_list -> statement NEWLINE statement_list .)
    NEWLINE         reduce using rule 3 (statement_list -> statement NEWLINE statement_list .)


state 20

    (14) assignment -> IDENTIFIER EQUALS NUMBER .

    NEWLINE         reduce using rule 14 (assignment -> IDENTIFIER EQUALS NUMBER .)
    $end            reduce using rule 14 (assignment -> IDENTIFIER EQUALS NUMBER .)


state 21

    (10) for_loop -> FOR IDENTIFIER IN . func_call COLON NEWLINE statement_list
    (11) func_call -> . IDENTIFIER LPAREN NUMBER RPAREN
    (12) func_call -> . IDENTIFIER LPAREN NUMBER COMMA NUMBER RPAREN
    (13) func_call -> . IDENTIFIER LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN

    IDENTIFIER      shift and go to state 23

    func_call                      shift and go to state 24

state 22

    (15) print_statement -> PRINT LPAREN IDENTIFIER . RPAREN

    RPAREN          shift and go to state 25


state 23

    (11) func_call -> IDENTIFIER . LPAREN NUMBER RPAREN
    (12) func_call -> IDENTIFIER . LPAREN NUMBER COMMA NUMBER RPAREN
    (13) func_call -> IDENTIFIER . LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN

    LPAREN          shift and go to state 26


state 24

    (10) for_loop -> FOR IDENTIFIER IN func_call . COLON NEWLINE statement_list

    COLON           shift and go to state 27


state 25

    (15) print_statement -> PRINT LPAREN IDENTIFIER RPAREN .

    NEWLINE         reduce using rule 15 (print_statement -> PRINT LPAREN IDENTIFIER RPAREN .)
    $end            reduce using rule 15 (print_statement -> PRINT LPAREN IDENTIFIER RPAREN .)


state 26

    (11) func_call -> IDENTIFIER LPAREN . NUMBER RPAREN
    (12) func_call -> IDENTIFIER LPAREN . NUMBER COMMA NUMBER RPAREN
    (13) func_call -> IDENTIFIER LPAREN . NUMBER COMMA NUMBER COMMA NUMBER RPAREN

    NUMBER          shift and go to state 28


state 27

    (10) for_loop -> FOR IDENTIFIER IN func_call COLON . NEWLINE statement_list

    NEWLINE         shift and go to state 29


state 28

    (11) func_call -> IDENTIFIER LPAREN NUMBER . RPAREN
    (12) func_call -> IDENTIFIER LPAREN NUMBER . COMMA NUMBER RPAREN
    (13) func_call -> IDENTIFIER LPAREN NUMBER . COMMA NUMBER COMMA NUMBER RPAREN

    RPAREN          shift and go to state 30
    COMMA           shift and go to state 31


state 29

    (10) for_loop -> FOR IDENTIFIER IN func_call COLON NEWLINE . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement NEWLINE statement_list
    (4) statement -> . assignment
    (5) statement -> . for_loop
    (6) statement -> . print_statement
    (7) statement -> . increment
    (8) statement -> . decrement
    (9) statement -> . standalone_statement
    (14) assignment -> . IDENTIFIER EQUALS NUMBER
    (10) for_loop -> . FOR IDENTIFIER IN func_call COLON NEWLINE statement_list
    (15) print_statement -> . PRINT LPAREN IDENTIFIER RPAREN
    (16) increment -> . IDENTIFIER PLUS_PLUS
    (17) decrement -> . IDENTIFIER MINUS_MINUS
    (18) standalone_statement -> . IDENTIFIER

    IDENTIFIER      shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12

    statement_list                 shift and go to state 32
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    for_loop                       shift and go to state 5
    print_statement                shift and go to state 6
    increment                      shift and go to state 7
    decrement                      shift and go to state 8
    standalone_statement           shift and go to state 9

state 30

    (11) func_call -> IDENTIFIER LPAREN NUMBER RPAREN .

    COLON           reduce using rule 11 (func_call -> IDENTIFIER LPAREN NUMBER RPAREN .)


state 31

    (12) func_call -> IDENTIFIER LPAREN NUMBER COMMA . NUMBER RPAREN
    (13) func_call -> IDENTIFIER LPAREN NUMBER COMMA . NUMBER COMMA NUMBER RPAREN

    NUMBER          shift and go to state 33


state 32

    (10) for_loop -> FOR IDENTIFIER IN func_call COLON NEWLINE statement_list .

    NEWLINE         reduce using rule 10 (for_loop -> FOR IDENTIFIER IN func_call COLON NEWLINE statement_list .)
    $end            reduce using rule 10 (for_loop -> FOR IDENTIFIER IN func_call COLON NEWLINE statement_list .)


state 33

    (12) func_call -> IDENTIFIER LPAREN NUMBER COMMA NUMBER . RPAREN
    (13) func_call -> IDENTIFIER LPAREN NUMBER COMMA NUMBER . COMMA NUMBER RPAREN

    RPAREN          shift and go to state 35
    COMMA           shift and go to state 34


state 34

    (13) func_call -> IDENTIFIER LPAREN NUMBER COMMA NUMBER COMMA . NUMBER RPAREN

    NUMBER          shift and go to state 36


state 35

    (12) func_call -> IDENTIFIER LPAREN NUMBER COMMA NUMBER RPAREN .

    COLON           reduce using rule 12 (func_call -> IDENTIFIER LPAREN NUMBER COMMA NUMBER RPAREN .)


state 36

    (13) func_call -> IDENTIFIER LPAREN NUMBER COMMA NUMBER COMMA NUMBER . RPAREN

    RPAREN          shift and go to state 37


state 37

    (13) func_call -> IDENTIFIER LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN .

    COLON           reduce using rule 13 (func_call -> IDENTIFIER LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 3 resolved as shift
